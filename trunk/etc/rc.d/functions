#!/bin/sh
#
# functions
#

# source splash-functions
. /etc/rc.d/splash-functions

STAT_COL=$[`stty size | awk 'BEGIN { RS=" " }; END { print $1 }'` - 13]

# colors:

if [ "$USECOLOR" = "YES" -o "$USECOLOR" = "yes" ]; then

	C_MAIN="\033[1;37m"       # main text
	C_OTHER="\033[1;34m"      # prefix & brackets
	C_SEPARATOR="\033[1;30m"  # separator
	
	C_BUSY="\033[0;36m"		# busy
	C_FAIL="\033[1;31m"		# failed
	C_DONE="\033[1;37m"		# completed
	C_BKGD="\033[1;35m"		# backgrounded
	
	C_H1="\033[1;37m"		# highlight text 1
	C_H2="\033[1;36m"		# highlight text 2
	
	C_CLEAR="\033[1;0m"
fi

# prefixes:

PREFIX_REG="::"
PREFIX_HL=" >"

# functions:

deltext() {
	echo -ne "\033[$(($STAT_COL+4))G"
}

printhl() {
	echo -e "$C_OTHER$PREFIX_HL $C_H1$1$C_CLEAR "
}

printsep() {
	echo -e "\n$C_SEPARATOR   ------------------------------\n"
}

stat_bkgd() {
	echo -ne "$C_OTHER$PREFIX_REG $C_MAIN$1$C_CLEAR "
	deltext
	echo -ne "   $C_OTHER[${C_BKGD}BKGD$C_OTHER]$C_CLEAR "
	#splash_setup
	if [ "$(gensplash_getmode)" == "silent" ]; then
		update_progress
		/sbin/splash silent
	fi
}

stat_busy() {
	echo -ne "$C_OTHER$PREFIX_REG $C_MAIN$1$C_CLEAR "
	deltext
	echo -ne "   $C_OTHER[${C_BUSY}BUSY$C_OTHER]$C_CLEAR "
	#splash_setup
	[ "$SPLASH_MODE_REQ" == "silent" ] && update_progress
}

stat_done() {
	deltext
	echo -e "   $C_OTHER[${C_DONE}DONE$C_OTHER]$C_CLEAR "
	#splash_setup
	if [ "$DAEMONSTATE" != "BKGD" ] && [ "$(gensplash_getmode)" == "silent" ]; then
		update_progress
		/sbin/splash silent
	fi
}

stat_fail() {
	deltext
	echo -e "   $C_OTHER[${C_FAIL}FAIL$C_OTHER]$C_CLEAR "
	if [ "$DAEMONSTATE" != "BKGD" ] && [ "$(gensplash_getmode)" == "silent" ]; then
		[ "$VERBOSEONFAIL" = "NO" -o "$VERBOSEONFAIL" = "no" ] && /sbin/splash silent || /sbin/splash verbose
	fi
}

stat_die() {
	retval=1
	[ "$1" = "" ] || retval=$1
	stat_fail
	exit $retval
}

status() {
	stat_busy "$1"
	shift
	$* >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		stat_done
		return 0
	else
		stat_fail
		return 1
	fi
}

# daemons:

add_daemon() {
	[ -d /var/run/daemons ] || mkdir -p /var/run/daemons
	touch /var/run/daemons/$1
}

rm_daemon() {
	rm -f /var/run/daemons/$1
}

ck_daemon() {
	[ -f /var/run/daemons/$1 ] && return 1
	return 0
}

# archie specific

# Reread boot command line; echo last parameter's argument or return false.
check_bootparam()
{
	[ -z "$CMDLINE" ] && CMDLINE="$(< /proc/cmdline)"
	case "$CMDLINE" in *\ $1*) return 0;; esac
	return 1
}

# get boot param value if available, return 1 if not
get_bootparam_value()
{
	[ -z "$CMDLINE" ] && CMDLINE="$(< /proc/cmdline)"
	case "$CMDLINE" in *\ $1=*) ;; *) return 1; ;; esac
	local result="${CMDLINE##*$1=}"
	echo ${result%%[     ]*}
}

# wrapper for getting archie username
get_archie_username()
{
	local USERNAME=`get_bootparam_value username`
	# scan nesting signature files (if any) for username
	[ -z "$USERNAME" ] && [ -f /.archie.root.nesting ] && USERNAME=$(< /.archie.root.nesting)
	[ -z "$USERNAME" ] && [ -f /archie.rot ] && USERNAME=$(< /archie.rot)
	[ -z "$USERNAME" ] && [ -f /home/.archie.home.nesting ] && USERNAME=$(< /home/.archie.home.nesting)
	[ -z "$USERNAME" ] && [ -f /home/archie.hom ] && USERNAME=$(< /home/archie.hom)
	echo $USERNAME
}

# End of file

